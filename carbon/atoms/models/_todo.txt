"""
class Location(models.Model):
    help = {
        'latitude': "",
        'longitude': "",
    }

    latitude = models.CharField(_('Latitude'), max_length=255, 
        blank=True, null=True, help_text=help['latitude'])
    longitude = models.CharField(_('Longitude'), max_length=255, 
        blank=True, null=True, help_text=help['longitude'])

    class Meta:
        abstract = True

    @staticmethod
    def create_from_request(request):
        #TODO -- integrate with an ip-location lookup
        location = Location(
            latitude='0',
            longitude='0'
        )
        location.save()
        return location

    @staticmethod
    def create_from_address(address, type=None):
        #TODO -- integrate with an address-location lookup
        location = Location(
            latitude='0',
            longitude='0'
        )
        location.save()
        return location



class Tracking(Versionable):

    help = {
        'tracking_type': "",
        'tracking_ip_address': "",
        'tracking_session_key': "",
        'tracking_location':"",
        'tracking_user':""
    }

    
    tracking_type = models.CharField(_('Tracking Type'), max_length=255, 
        blank=True, null=True, help_text=help['tracking_type'])

    tracking_ip_address = models.CharField(_('Tracking IP Address'), max_length=255, 
        blank=True, null=True, help_text=help['tracking_ip_address'])

    tracking_session_key = models.CharField(_('Tracking Session Key'), max_length=255, 
        blank=True, null=True, help_text=help['tracking_session_key'])

    tracking_location = models.ForeignKey('Location',
        blank=True, null=True, help_text=help['tracking_location'])

    tracking_user = models.ForeignKey(settings.AUTH_USER_MODEL,
        blank=True, null=True, help_text=help['tracking_user'])

    # Related item
    content_type = models.ForeignKey(ContentType,
             verbose_name=_('content type'),
            related_name="content_type_set_for_%(app_label)s_%(class)s")
    object_pk = models.TextField(_('object ID'))
    content_object = generic.GenericForeignKey(ct_field="content_type", 
        fk_field="object_pk")

    class Meta:
        abstract = True

    @staticmethod
    def track_item(item, request, tracking_type=None):
        ipaddress = request.META.get("REMOTE_ADDR", None)
        tracking_location = settings.LOCATION_MODEL.create_from_request(request)
        tracking_user = request.user
        track = Tracking(
            content_object=item,
            tracking_type=tracking_type,
            tracking_ip_address = ipaddress,
            tracking_session_key = request.session.session_key,
            tracking_location = tracking_location,
            tracking_user = request.user,            
        )
        track.save()
        return track

"""